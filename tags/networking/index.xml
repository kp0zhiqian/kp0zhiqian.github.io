<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>networking on kp0zhiqian&#39;s</title>
    <link>https://kp0zhiqian.github.io/tags/networking/</link>
    <description>Recent content in networking on kp0zhiqian&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Zhiqian Guan</copyright>
    <lastBuildDate>Mon, 10 Jan 2022 00:11:23 +0800</lastBuildDate><atom:link href="https://kp0zhiqian.github.io/tags/networking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SMFS and DMFS in Hardware Offloading</title>
      <link>https://kp0zhiqian.github.io/posts/smfs-dmfs/</link>
      <pubDate>Mon, 10 Jan 2022 00:11:23 +0800</pubDate>
      
      <guid>https://kp0zhiqian.github.io/posts/smfs-dmfs/</guid>
      <description>SMFS and DMFS in Hardware Offloading switchdev (ethernet switch device driver model) kernel.org - switchdev
 The Ethernet switch device driver model (switchdev) is an in-kernel driver model for switch devices which offload the forwarding (data) plane from the kernel.
 Configuration  Use &amp;ldquo;depends NET_SWITCHDEV&amp;rdquo; in driver&amp;rsquo;s Kconfig to ensure switchdev model support is built for driver. use devlink tool to setup switch mode devlink dev eswitch set pci/$PF_PCI mode switchdev  switchdev Performance Tuning OVS Offload Using ASAP2 Direct</description>
    </item>
    
    <item>
      <title>Transcript of XDP Tech Talk</title>
      <link>https://kp0zhiqian.github.io/posts/xdp-tech-talk-script/</link>
      <pubDate>Fri, 21 May 2021 00:11:23 +0800</pubDate>
      
      <guid>https://kp0zhiqian.github.io/posts/xdp-tech-talk-script/</guid>
      <description>This is the transcript of my XDP 5 mins tech talk in QE all hands. Only for sharing and archiving.
 XDP is a technology that can achieve high-speed networking performance. Allowing packets to be reflected, filtered, or redirected, but without traversing kernel networking stack.
After hearing this, some may think: Oh, Iâ€™ve heard of this! Like the famous DPDK, I can bypass the Kernel and do whatever I want in userspace to the incoming packets.</description>
    </item>
    
    <item>
      <title>From Simple Reliable Transport Protocol to TCP (1)</title>
      <link>https://kp0zhiqian.github.io/posts/tcp-seq/</link>
      <pubDate>Fri, 14 May 2021 00:11:23 +0800</pubDate>
      
      <guid>https://kp0zhiqian.github.io/posts/tcp-seq/</guid>
      <description>In the first article of this series of articles, we&amp;rsquo;ll discuss the concepts we need to implement to design a very basic reliable transport protocol. How to implement these concepts will be covered in future articles.
If you found anything incorrect, please don&amp;rsquo;t hesitate to reach me.
Checksum Imagine you&amp;rsquo;re designing a reliable transport protocol. You&amp;rsquo;ve already implemented the basic send and receive features, including segmenting the whole data when it&amp;rsquo;s too large.</description>
    </item>
    
  </channel>
</rss>
