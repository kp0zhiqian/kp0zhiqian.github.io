<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kp0zhiqian&#39;s</title>
    <link>https://kp0zhiqian.github.io/</link>
    <description>Recent content on kp0zhiqian&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Zhiqian Guan</copyright>
    <lastBuildDate>Thu, 14 Oct 2021 00:10:57 +0800</lastBuildDate><atom:link href="https://kp0zhiqian.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Container, Kubernetes and SR-IOV</title>
      <link>https://kp0zhiqian.github.io/posts/container-k8s/</link>
      <pubDate>Thu, 14 Oct 2021 00:10:57 +0800</pubDate>
      
      <guid>https://kp0zhiqian.github.io/posts/container-k8s/</guid>
      <description>This article is the transcript of a tech sharing in my team and assumed the audiences have already knew some background knowladge.
 Container Basic  &amp;ldquo;Container is NOT virtual machine!&amp;rdquo;
 Linux provides namespace and cgroup to isolate or limit resources between different process.
Container is a technology that uses namespace and cgroup (also the union file system) to create an isolated environment that can be used by a process.</description>
    </item>
    
    <item>
      <title>Ansible - Others</title>
      <link>https://kp0zhiqian.github.io/posts/ansible-others/</link>
      <pubDate>Mon, 04 Oct 2021 00:10:57 +0800</pubDate>
      
      <guid>https://kp0zhiqian.github.io/posts/ansible-others/</guid>
      <description>lookup to access external file or database Basic usage:
1 2 3 4 5 6  --- - hosts: all remote_user: root gather_facts: false vars: contents: &amp;#34;{{ lookup(&amp;#39;file&amp;#39;, &amp;#39;data/plain.txt&amp;#39;) }}&amp;#34;   we can also read other data:lookup(&#39;file|env|pipe|template|ini|csvfile|dig|&#39;)
filter filter excute commands in the management node and get responds.
Usage of filters:
1 2 3 4 5 6 7 8  - hosts: localhost remote_user: root gather_facts: false vars: my_test_string: &amp;#34;This is the testing string&amp;#34; tasks: - name: &amp;#34;quote {{ my_test_string }}&amp;#34; debug: msg=&amp;#34;echo {{ my_test_string | quote }}&amp;#34;   different filters:</description>
    </item>
    
    <item>
      <title>Ansible - Role</title>
      <link>https://kp0zhiqian.github.io/posts/ansible-role/</link>
      <pubDate>Sun, 03 Oct 2021 00:10:57 +0800</pubDate>
      
      <guid>https://kp0zhiqian.github.io/posts/ansible-role/</guid>
      <description>role role is the ansible playbook&amp;rsquo;s package.
we can also define pre_tasks and post_tasks to run tasks before and after role.
Location of Role  in the role directory of current directory in the ANSIBLE_ROLES_PATH in the roles_path of ansible configuration file. default directory: /etc/ansible/roles  Use Role 1 2 3 4 5 6 7 8 9 10  --- # file site.yml - hosts: all remote_user: root roles: - simple tasks: - name: Taks in site.</description>
    </item>
    
    <item>
      <title>Ansible - Playbook&amp;Role</title>
      <link>https://kp0zhiqian.github.io/posts/ansible-playbook/</link>
      <pubDate>Sat, 02 Oct 2021 00:10:57 +0800</pubDate>
      
      <guid>https://kp0zhiqian.github.io/posts/ansible-playbook/</guid>
      <description>Playbook: A yaml file that can be excuted by ansible Before playbook, we need to understand YAML: what is yaml
CMD  ansible-playbook deploy.yml ansible-playbook playbook.yml --verbose ansible-playbook playbook.yml --list-hosts ansible-playbook playbook.yml -f 10  Basic Playbook Structure playbook is basically about 3 questions:
 what hosts do we want to run playbook on? what tasks do we want to run? what aftercare tasks do we want to run?  Q1: what hosts do we want to run playbook on?</description>
    </item>
    
    <item>
      <title>Ansible - Var</title>
      <link>https://kp0zhiqian.github.io/posts/ansible-var/</link>
      <pubDate>Fri, 01 Oct 2021 00:10:57 +0800</pubDate>
      
      <guid>https://kp0zhiqian.github.io/posts/ansible-var/</guid>
      <description>Var Define Var in Playbook 1 2 3 4 5 6 7  vars: http_port: 80 ... tasks: - name: xxx firewalld: port={{http_port}}   Define Var in File file:
1  http_port:80   usage
1 2 3  - hosts: web vars_files: - vars/server_vars.yml   Var Trap sometimes YAML and ansible playbook cannot work together. when it report syntex error, you could try add quote.
Facts Facts are the information of remote hosts collected by &amp;lsquo;setup&amp;rsquo; module.</description>
    </item>
    
    <item>
      <title>Ansible - Basic</title>
      <link>https://kp0zhiqian.github.io/posts/ansible-basic/</link>
      <pubDate>Thu, 30 Sep 2021 00:10:57 +0800</pubDate>
      
      <guid>https://kp0zhiqian.github.io/posts/ansible-basic/</guid>
      <description>Installation&amp;amp;setup  Redhat/Centos need to Install EPEL, fedora has it in its default source Generate ssh, copy ssh to remote, save remote hosts to known_hosts  Configuration default configuration file: /etc/ansible/ansible.cfg
basic options:
 inventory: path to host list file library: path to extra module remote_tmp: remote host temp files path local_tmp: management node temp fiels path  configuration file priority Ansible will try to find configuration file in below order:</description>
    </item>
    
    <item>
      <title>Transcript of XDP Tech Talk</title>
      <link>https://kp0zhiqian.github.io/posts/xdp-tech-talk-script/</link>
      <pubDate>Fri, 21 May 2021 00:11:23 +0800</pubDate>
      
      <guid>https://kp0zhiqian.github.io/posts/xdp-tech-talk-script/</guid>
      <description>This is the transcript of my XDP 5 mins tech talk in QE all hands. Only for sharing and archiving.
 XDP is a technology that can achieve high-speed networking performance. Allowing packets to be reflected, filtered, or redirected, but without traversing kernel networking stack.
After hearing this, some may think: Oh, Iâ€™ve heard of this! Like the famous DPDK, I can bypass the Kernel and do whatever I want in userspace to the incoming packets.</description>
    </item>
    
    <item>
      <title>Understanding OpenVswitch Hardware Offloading</title>
      <link>https://kp0zhiqian.github.io/posts/hardware_offload/</link>
      <pubDate>Thu, 20 May 2021 00:11:23 +0800</pubDate>
      
      <guid>https://kp0zhiqian.github.io/posts/hardware_offload/</guid>
      <description>This article will focus on the usage of hardware offloading in openvswitch. Our journey will start from the basic concept of openvswitch to the hardware offloading datapath. The driver we use is mlx5_core.
Basic Concept of OpenVswitch Before talking about hardware offloading, we will review some basic components in the openvswitch world.
ovs-vswitchd  A daemon that manages and controls any number of Open vSwitch switches on the local machine. (From Official Doc ovs-vswitchd)</description>
    </item>
    
    <item>
      <title>From Simple Reliable Transport Protocol to TCP (1)</title>
      <link>https://kp0zhiqian.github.io/posts/tcp-seq/</link>
      <pubDate>Fri, 14 May 2021 00:11:23 +0800</pubDate>
      
      <guid>https://kp0zhiqian.github.io/posts/tcp-seq/</guid>
      <description>In the first article of this series of articles, we&amp;rsquo;ll discuss the concepts we need to implement to design a very basic reliable transport protocol. How to implement these concepts will be covered in future articles.
If you found anything incorrect, please don&amp;rsquo;t hesitate to reach me.
Checksum Imagine you&amp;rsquo;re designing a reliable transport protocol. You&amp;rsquo;ve already implemented the basic send and receive features, including segmenting the whole data when it&amp;rsquo;s too large.</description>
    </item>
    
    <item>
      <title>Pytest Notes</title>
      <link>https://kp0zhiqian.github.io/posts/pytest/</link>
      <pubDate>Tue, 20 Oct 2020 00:11:23 +0800</pubDate>
      
      <guid>https://kp0zhiqian.github.io/posts/pytest/</guid>
      <description>Test files and functions pytest will run all files of format test_*.py or *_test.py in the current path. And run the functions name start with test.
Run tests pytest in the current directory will run the test pytest &amp;lt;filename&amp;gt; -v will run a specific file. pytest -k &amp;lt;string&amp;gt; -v will run the functions that containes a string &amp;lt;string&amp;gt;
Test results  PASSED(.): test pass FAILED(F): test fail SKIPPED(s): test skipped, you can use @pytest.</description>
    </item>
    
    <item>
      <title>Understanding Hugepage</title>
      <link>https://kp0zhiqian.github.io/posts/hugepage/</link>
      <pubDate>Tue, 20 Oct 2020 00:11:23 +0800</pubDate>
      
      <guid>https://kp0zhiqian.github.io/posts/hugepage/</guid>
      <description>Virtual Memory in Linux In a multi-task system, the operation to the memory of different processes will have conflict problems. To solve this problem, the concept of virtual memory comes. When the process starting, OS will assign virtual memory addresses for the process to use. Also, OS will map the virtual memory addresses to physical memory addresses. So we need to mapping the table to maintain the relationship between the virtual memory address and the physical memory address.</description>
    </item>
    
    <item>
      <title>Understanding DMA, IOMMU, and VFIO</title>
      <link>https://kp0zhiqian.github.io/posts/dma-iommu-vfio/</link>
      <pubDate>Fri, 04 Sep 2020 00:10:57 +0800</pubDate>
      
      <guid>https://kp0zhiqian.github.io/posts/dma-iommu-vfio/</guid>
      <description>DMA (Direct Memory Access) Generally speaking, the read and write operation of memory will all issue by the CPU. The read and write of memory of other devices must issue through the CPU. DMA, as in Direct Memory Access, will release the CPU from such a process. When devices need to r/w the memory, they will report to the CPU. The CPU will give the system bus to the DMA controller.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://kp0zhiqian.github.io/about/</link>
      <pubDate>Fri, 21 Dec 2012 12:12:12 +0000</pubDate>
      
      <guid>https://kp0zhiqian.github.io/about/</guid>
      <description>An engineer who has a passion for networking and quality engineering. I used to be a Datacenter Network Engineer but currently, I&amp;rsquo;m a Software Quality Engineer in Red Hat, focusing on Linux networking, including Openvswitch, eXpress DataPath and etc.</description>
    </item>
    
  </channel>
</rss>
